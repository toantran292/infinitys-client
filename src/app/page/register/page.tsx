"use client";

import { useEffect, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import {
  registerPage,
  getPresignedUrl,
  getViewsAsset
} from "@/providers/page-provider";
import { useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Layout } from "@/components/layouts";
import { toast } from "@/hooks/use-toast";
import PagePreview from "@/components/ui/PagePreview";
import instance from "@/common/api";

export default function RegisterPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [avatar, setAvatar] = useState<string | null>(null);
  const [uploading, setUploading] = useState<boolean>(false);
  const [presignedUrl, setPresignedUrl] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors }
  } = useForm({
    defaultValues: {
      name: "",
      url: "",
      address: "",
      email: "",
      avatar: null,
      content: ""
    }
  });

  useEffect(() => {
    setValue("name", searchParams.get("name") || "");
    setValue("url", searchParams.get("url") || "");
    setValue("address", searchParams.get("address") || "");
    setValue("email", searchParams.get("email") || "");
    setValue("avatar", searchParams.get("avatar") || null);
    setValue("content", searchParams.get("content") || "");
  }, [searchParams, setValue]);

  const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    setSelectedFile(file);
    try {
      setUploading(true);

      const { url, key } = await getPresignedUrl(file.name);
      const uploadResponse = await fetch(url, {
        method: "PUT",
        body: file,
        headers: { "Content-Type": file.type }
      });

      if (!uploadResponse.ok) throw new Error("Upload ·∫£nh th·∫•t b·∫°i");

      const res = await getViewsAsset(key);
      setPresignedUrl(res.url);
      setAvatar(key);
      setValue("avatar", key);

      toast({
        title: "Upload th√†nh c√¥ng!",
        description: "·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n."
      });
    } catch (error) {
      console.error("Upload l·ªói:", error);
      toast({
        title: "L·ªói khi upload ·∫£nh",
        description: "Vui l√≤ng th·ª≠ l·∫°i!",
        variant: "destructive"
      });
    } finally {
      setUploading(false);
    }
  };

  const onSubmit = async (data: any) => {
    try {
      const response = await registerPage({
        ...data,
        avatar: avatar
          ? {
              key: avatar,
              name: selectedFile?.name,
              content_type: selectedFile?.type,
              size: selectedFile?.size
            }
          : null
      });

      const pageId = response.id;

      toast({
        title: "T·∫°o trang th√†nh c√¥ng!",
        description: `Trang "${data.name}" ƒë√£ ƒë∆∞·ª£c t·∫°o.`
      });

      if (selectedFile && avatar) {
        console.log("üìå B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t Avatar cho Page:", pageId);

        await instance.patch(`api/pages/${pageId}/avatar`, {
          avatar: {
            key: avatar,
            name: selectedFile.name,
            content_type: selectedFile.type,
            size: selectedFile.size
          }
        });
      }
      router.push("/page");
    } catch (error) {
      toast({
        title: "L·ªói khi t·∫°o trang",
        description: "ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o trang. Vui l√≤ng th·ª≠ l·∫°i",
        variant: "destructive"
      });
    }
  };

  return (
    <Layout>
      <div className="bg-[#f4f2ee] min-h-screen w-full flex justify-center py-10 border-t-2 border-b-2 border-gray-600">
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="max-w-5xl w-full flex gap-8"
        >
          <div className="w-2/3 bg-white p-6 rounded-lg shadow-md self-start">
            <h1 className="text-xl font-semibold mb-4">
              H√£y b·∫Øt ƒë·∫ßu v·ªõi m·ªôt v√†i chi ti·∫øt v·ªÅ c√¥ng ty c·ªßa b·∫°n.
            </h1>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold">T√™n*</label>
                <Input
                  className="w-full"
                  type="text"
                  {...register("name", { required: "T√™n trang l√† b·∫Øt bu·ªôc" })}
                />
                <p className="text-red-500 text-sm">{errors.name?.message}</p>
              </div>

              <div>
                <label className="block text-sm font-semibold">
                  Trang web c√¥ng ty
                </label>
                <Input
                  className="w-full"
                  type="text"
                  {...register("url")}
                  placeholder="http://, https:// ho·∫∑c www."
                />
              </div>

              <div>
                <label className="block text-sm font-semibold">
                  ƒê·ªãa ch·ªâ c√¥ng ty
                </label>
                <Input
                  className="w-full"
                  type="text"
                  {...register("address")}
                />
              </div>

              <div>
                <label className="block text-sm font-semibold">
                  Email c√¥ng ty
                </label>
                <Input className="w-full" type="email" {...register("email")} />
              </div>

              <div>
                <label className="block text-sm font-semibold">
                  Logo trang
                </label>
                <label className="w-full border-dashed border-2 border-gray-300 bg-gray-100 flex flex-col items-center justify-center py-4 rounded-md cursor-pointer text-gray-600 text-sm">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleAvatarChange}
                    className="hidden"
                  />
                  {avatar ? "T·∫£i l√™n {:fileName}" : "T·∫£i l√™n t·ªáp"}
                </label>
                <p className="text-xs text-gray-500 mt-1">
                  Khuy·∫øn ngh·ªã 300 x 300px. H·ªó tr·ª£ JPG, JPEG v√† PNG.
                </p>
              </div>

              <div>
                <label className="block text-sm font-semibold">Kh·∫©u hi·ªáu</label>
                <Input
                  className="w-full"
                  type="text"
                  {...register("content")}
                />
              </div>
            </div>

            <div className="mt-4 flex items-start gap-2">
              <input type="checkbox" id="confirm" className="mt-1" required />
              <label htmlFor="confirm" className="text-sm">
                T√¥i x√°c minh r·∫±ng t√¥i l√† ƒë·∫°i di·ªán ƒë∆∞·ª£c ·ªßy quy·ªÅn c·ªßa t·ªï ch·ª©c n√†y
                v√† c√≥ quy·ªÅn h√†nh ƒë·ªông thay m·∫∑t t·ªï ch·ª©c n√†y trong vi·ªác t·∫°o v√†
                qu·∫£n l√Ω trang n√†y.
              </label>
            </div>

            <div className="flex justify-end mt-6">
              <Button
                type="submit"
                className="bg-blue-600 text-white px-6 py-2 rounded-3xl"
              >
                {uploading ? "ƒêang t·∫£i ·∫£nh..." : "T·∫°o trang"}
              </Button>
            </div>
          </div>

          <div className="w-1/3 sticky top-6 self-start">
            <PagePreview
              url={presignedUrl}
              name={watch("name")}
              content={watch("content")}
              email={watch("email")}
            />
          </div>
        </form>
      </div>
    </Layout>
  );
}
